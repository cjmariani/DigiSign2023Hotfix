@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime;
@inject MenuService ms;

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">DigiSign Admin</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">      
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="New">
                <span class="oi oi-plus" aria-hidden="true"></span> NEW SIGN
            </NavLink>
        </li>

        <li class="nav-item px-3">
            <NavLink class="nav-link" href="Regs">
                <span class="oi oi-monitor" aria-hidden="true"></span> REGISTRATION
            </NavLink>
        </li>

        @if(signs != null) {
            @foreach (var s in signs)
            {
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href=@String.Format("/Edit/{0}", s._id)>
                        <span class="@s.Icon" aria-hidden="true"></span> @s.name (@s.feed) (@s.order)
                    </NavLink>
                </li>
            }
        }
    </ul>

    <div style="position:absolute;bottom:20px;width:100%;text-align:center;">
        <button @onclick="GetSigns" class="btn btn-lg btn-trans">
            <span class="oi oi-reload" aria-hidden="true"></span> @ms.LastEditID
        </button>
    </div>
</div>

@code {
    private string _lasteditscreen;

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private RealmUser user = new RealmUser{};

    private List<DigiSign> signs = null;

    public async Task GetSigns() {        
        string[] args = {};
        signs = await JSRuntime.InvokeAsync<List<DigiSign>>("realmShim_Function", "getSignList", args);
        StateHasChanged(); 
    }

    private async void MenuChanged(EventArgs e)
    {
        await GetSigns();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await JSRuntime.InvokeAsync<RealmUser>("getUserDetails");
            await GetSigns();
        } catch(Exception ex) {
            Console.WriteLine(ex);
        }
        ms.OnChange += ()  => {StateHasChanged(); GetSigns();  };
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }


}
